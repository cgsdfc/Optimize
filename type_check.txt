# type check rules

表达式中，类型是进行自动转换的，比如字符型和整型运算，字符型自动转换为整型，对于有实型的文法，整型和实型运算，自动转换为实型。

除了在表达式的计算中有上述自动转换的情况外，其他地方都可以处理成类型要完全一致，否则可以报错

老师,整数字面量的类型是什么啊？
char c = 'a';
c = c + 1;
这里面的字面量1的类型应该是char还是int啊？

c = c + 1;的右边会得到整型结果，左边是char，类型不一致，报错即可。

按照作业的规则，字符型参加运算都转化为整型进行。赋值号左右两端只要类型不一致都报错。

这其实就是约定的问题，没有什么本质的对错，咱们约定：
（1）小括号括起来也算参与了运算，所以输出ascii码
（2）数组的下标只允许出现整数类型的表达式，咱们约定单独的字符算字符型，所以这里认为类型不匹配
（3）类型不匹配
（4）类型不匹配（因为要与0比较是否相等）

再跟老师确认几个小细节。

老师您说的“按照作业的规则，字符型参加运算都转化为整型进行。”，
其中的“参与运算”，除了包括 + - * /之外，是否包括：
（1）小括号
比如，
printf(('a'));
是应该打印出字符a，还是对应的ascii码值？
（2）中括号
比如，
char str[200];
str['a'] = '+';//在实际C语言中是正确的
上面这个赋值语句正确吗？
该赋值语句是利用了这条规则：
<赋值语句>::=<标识符>'['<表达式1>']'=<表达式2>，其中<表达式1>是'a'。
若我们认为<表达式1>的值的类型是char，那么用一个char作为下标在一个数组中进行索引，会认为这是类型不匹配的语义错误吗？

（3）比较运算符
比如
if('a'>96) ....
此语句会认为是类型不匹配的语义错误吗？

（3.5）顺便问一下
char c;
...
if(c) ...
此if语句，是否 不会报语义错误、且将小括号中的<条件>判定为真？

谢谢解答！

总结：
- char在参与算术运算时自动转化为int。
- 其他情况要求类型严格匹配，包括函数传参，返回值和赋值。
- 算术运算包括小括号。
- 中括号和condition只能是int。

关于printf的补充约定：
咱们约定，有加法运算法、乘法运算符，以及带括号的表达式算参与运算，单个变量、常量、有返回值的函数调用、数组元素如果是字符型，在输出语句中输出字符。

# Load/Store:
LOAD_LOCAL # push a local variable
LOAD_GLOBAL # push a global variable
LOAD_CONST # push a constant
LOAD_STRING # push a string's id
STORE_LOCAL # pop and save a local variable
STORE_GLOBAL # pop and save a global variable

# Binary Arithmetic
# tos = tos1 op tos
BINARY_ADD
BINARY_SUB
BINARY_MULTIPLY
BINARY_DIVIDE # floor divide

# Unary Arithmetic
# tos = op tos
UNARY_NOT
UNARY_POSITIVE
UNARY_NEGATIVE

# Function Calling
CALL_FUNCTION

# pop off the tos and return that
RETURN_VALUE
# just end the current function, not returning any value
RETURN_NONE

# IO
# the following print pops off tos and print it in different ways
PRINT_STRING
PRINT_CHARACTER
PRINT_INTEGER

# read an int, push it onto the stack
READ_INTEGER
# read a char, push it onto the stack
READ_CHARACTER

# Subscript Related
# push array[index]: index = tos, array = tos1
BINARY_SUBSCR
# array[index] = value: value = tos2, array = tos1, index = tos
STORE_SUBSCR

# Jump/Branch
# absolute jump if tos is true, arg is target
JUMP_IF_TRUE
JUMP_IF_FALSE
# absolute jump, arg is target
JUMP_FORWARD

# Rich Compare and Jump
JUMP_IF_NOT_EQUAL
JUMP_IF_EQUAL
JUMP_IF_GREATER
JUMP_IF_GREATER_EQUAL
JUMP_IF_LESS
JUMP_IF_LESS_EQUAL

# stack manipulation
POP_TOP

Program(decls=[ConstDecl(type=BasicTypeKind::Int, name=max_heap_size, value=Num(n=100)), ConstDecl(type=BasicTypeKind::Character, name=character, value=Char(c=99)), ConstDecl(type=BasicTypeKind::Int, name=is_valid, value=Num(n=1)), ConstDecl(type=BasicTypeKind::Int, name=hasattr, value=Num(n=0)), ConstDecl(type=BasicTypeKind::Character, name=digit, value=Char(c=48)), ConstDecl(type=BasicTypeKind::Character, name=letter, value=Char(c=97)), VarDecl(type=BasicTypeKind::Int, is_array=1, size=100, name=heap), VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=index), VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=flag), VarDecl(type=BasicTypeKind::Int, is_array=1, size=2, name=array), VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=module), VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=class), VarDecl(type=BasicTypeKind::Int, is_array=1, size=10, name=errors), VarDecl(type=BasicTypeKind::Int, is_array=1, size=20, name=input), FuncDef(return_type=BasicTypeKind::Int, name=addi, args=[Arg(type=BasicTypeKind::Int, name=a, loc=(14, 9)), Arg(type=BasicTypeKind::Int, name=b, loc=(14, 16))], decls=[], stmts=[Return(value=BinOp(left=Name(id=a, ctx=ExprContextKind::Load), op=OperatorKind::Add, right=Name(id=b, ctx=ExprContextKind::Load)))]), FuncDef(return_type=BasicTypeKind::Character, name=addc, args=[Arg(type=BasicTypeKind::Character, name=a, loc=(18, 10)), Arg(type=BasicTypeKind::Character, name=b, loc=(18, 18))], decls=[], stmts=[Return(value=BinOp(left=Name(id=a, ctx=ExprContextKind::Load), op=OperatorKind::Add, right=Name(id=b, ctx=ExprContextKind::Load)))]), FuncDef(return_type=BasicTypeKind::Void, name=print_char, args=[Arg(type=BasicTypeKind::Character, name=c, loc=(22, 16))], decls=[], stmts=[Write(str=None, value=Name(id=c, ctx=ExprContextKind::Load))]), FuncDef(return_type=BasicTypeKind::Void, name=print_string, args=[], decls=[], stmts=[Write(str="this is a string", value=None)]), FuncDef(return_type=BasicTypeKind::Void, name=print_string_ex, args=[Arg(type=BasicTypeKind::Int, name=expr, loc=(30, 21))], decls=[], stmts=[Write(str="expr is ", value=Name(id=expr, ctx=ExprContextKind::Load))]), FuncDef(return_type=BasicTypeKind::Void, name=dead_loop, args=[], decls=[], stmts=[While(condition=Num(n=1), body=[Write(str="In dead loop", value=None)])]), FuncDef(return_type=BasicTypeKind::Int, name=prompt_int, args=[], decls=[VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=val)], stmts=[Write(str="Please input an integer:", value=None), Read(names=[val]), Return(value=Name(id=val, ctx=ExprContextKind::Load))]), FuncDef(return_type=BasicTypeKind::Void, name=swap, args=[Arg(type=BasicTypeKind::Int, name=index1, loc=(48, 10)), Arg(type=BasicTypeKind::Int, name=index2, loc=(48, 22))], decls=[VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=temp)], stmts=[Assign(target=Name(id=temp, ctx=ExprContextKind::Store), value=Subscript(name=heap, index=Name(id=index1, ctx=ExprContextKind::Load), ctx=ExprContextKind::Load)), Assign(target=Subscript(name=heap, index=Name(id=index1, ctx=ExprContextKind::Load), ctx=ExprContextKind::Store), value=Subscript(name=heap, index=Name(id=index2, ctx=ExprContextKind::Load), ctx=ExprContextKind::Load)), Assign(target=Subscript(name=heap, index=Name(id=index2, ctx=ExprContextKind::Load), ctx=ExprContextKind::Store), value=Name(id=temp, ctx=ExprContextKind::Load))]), FuncDef(return_type=BasicTypeKind::Void, name=heapify, args=[Arg(type=BasicTypeKind::Int, name=index, loc=(55, 13)), Arg(type=BasicTypeKind::Int, name=heap_size, loc=(55, 24))], decls=[VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=largest), VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=left), VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=right)], stmts=[Assign(target=Name(id=largest, ctx=ExprContextKind::Store), value=Name(id=index, ctx=ExprContextKind::Load)), Assign(target=Name(id=left, ctx=ExprContextKind::Store), value=BinOp(left=BinOp(left=Num(n=2), op=OperatorKind::Mult, right=Name(id=index, ctx=ExprContextKind::Load)), op=OperatorKind::Add, right=Num(n=1))), Assign(target=Name(id=right, ctx=ExprContextKind::Store), value=BinOp(left=BinOp(left=Num(n=2), op=OperatorKind::Mult, right=Name(id=index, ctx=ExprContextKind::Load)), op=OperatorKind::Add, right=Num(n=2))), If(test=BinOp(left=Name(id=left, ctx=ExprContextKind::Load), op=OperatorKind::Lt, right=Name(id=heap_size, ctx=ExprContextKind::Load)), body=[If(test=BinOp(left=Subscript(name=heap, index=Name(id=left, ctx=ExprContextKind::Load), ctx=ExprContextKind::Load), op=OperatorKind::Gt, right=Subscript(name=heap, index=Name(id=largest, ctx=ExprContextKind::Load), ctx=ExprContextKind::Load)), body=[Assign(target=Name(id=largest, ctx=ExprContextKind::Store), value=Name(id=left, ctx=ExprContextKind::Load))], orelse=[])], orelse=[]), If(test=BinOp(left=Name(id=right, ctx=ExprContextKind::Load), op=OperatorKind::Lt, right=Name(id=heap_size, ctx=ExprContextKind::Load)), body=[If(test=BinOp(left=Subscript(name=heap, index=Name(id=right, ctx=ExprContextKind::Load), ctx=ExprContextKind::Load), op=OperatorKind::Gt, right=Subscript(name=heap, index=Name(id=largest, ctx=ExprContextKind::Load), ctx=ExprContextKind::Load)), body=[Assign(target=Name(id=largest, ctx=ExprContextKind::Store), value=Name(id=right, ctx=ExprContextKind::Load))], orelse=[])], orelse=[]), If(test=BinOp(left=Name(id=largest, ctx=ExprContextKind::Load), op=OperatorKind::NotEq, right=Name(id=index, ctx=ExprContextKind::Load)), body=[ExprStmt(value=Call(func=swap, args=[Name(id=index, ctx=ExprContextKind::Load), Name(id=largest, ctx=ExprContextKind::Load)])), ExprStmt(value=Call(func=heapify, args=[Name(id=largest, ctx=ExprContextKind::Load), Name(id=heap_size, ctx=ExprContextKind::Load)]))], orelse=[])]), FuncDef(return_type=BasicTypeKind::Void, name=heap_sort, args=[Arg(type=BasicTypeKind::Int, name=heap_size, loc=(83, 15))], decls=[VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=i)], stmts=[Assign(target=Name(id=i, ctx=ExprContextKind::Store), value=BinOp(left=BinOp(left=Name(id=heap_size, ctx=ExprContextKind::Load), op=OperatorKind::Div, right=Num(n=2)), op=OperatorKind::Sub, right=Num(n=1))), While(condition=BinOp(left=Name(id=i, ctx=ExprContextKind::Load), op=OperatorKind::GtE, right=Num(n=0)), body=[ExprStmt(value=Call(func=heapify, args=[Name(id=i, ctx=ExprContextKind::Load), Name(id=heap_size, ctx=ExprContextKind::Load)])), Assign(target=Name(id=i, ctx=ExprContextKind::Store), value=BinOp(left=Name(id=i, ctx=ExprContextKind::Load), op=OperatorKind::Sub, right=Num(n=1)))]), For(initial=Assign(target=Name(id=i, ctx=ExprContextKind::Store), value=BinOp(left=Name(id=heap_size, ctx=ExprContextKind::Load), op=OperatorKind::Sub, right=Num(n=1))), condition=BinOp(left=Name(id=i, ctx=ExprContextKind::Load), op=OperatorKind::GtE, right=Num(n=0)), step=Assign(target=Name(id=i, ctx=ExprContextKind::Store), value=BinOp(left=Name(id=i, ctx=ExprContextKind::Load), op=OperatorKind::Sub, right=Num(n=1))), body=[ExprStmt(value=Call(func=swap, args=[Num(n=0), Name(id=i, ctx=ExprContextKind::Load)])), ExprStmt(value=Call(func=heapify, args=[Num(n=0), Name(id=i, ctx=ExprContextKind::Load)]))])]), FuncDef(return_type=BasicTypeKind::Void, name=print_heap, args=[Arg(type=BasicTypeKind::Int, name=heap_size, loc=(98, 16))], decls=[VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=i)], stmts=[For(initial=Assign(target=Name(id=i, ctx=ExprContextKind::Store), value=Num(n=0)), condition=BinOp(left=Name(id=i, ctx=ExprContextKind::Load), op=OperatorKind::Lt, right=Name(id=heap_size, ctx=ExprContextKind::Load)), step=Assign(target=Name(id=i, ctx=ExprContextKind::Store), value=BinOp(left=Name(id=i, ctx=ExprContextKind::Load), op=OperatorKind::Add, right=Num(n=1))), body=[Write(str=None, value=Subscript(name=heap, index=Name(id=i, ctx=ExprContextKind::Load), ctx=ExprContextKind::Load)), If(test=BinOp(left=Name(id=i, ctx=ExprContextKind::Load), op=OperatorKind::NotEq, right=BinOp(left=Name(id=heap_size, ctx=ExprContextKind::Load), op=OperatorKind::Sub, right=Num(n=1))), body=[Write(str=" ", value=None)], orelse=[])])]), FuncDef(return_type=BasicTypeKind::Void, name=reset_heap, args=[], decls=[VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=i)], stmts=[For(initial=Assign(target=Name(id=i, ctx=ExprContextKind::Store), value=Num(n=0)), condition=BinOp(left=Name(id=i, ctx=ExprContextKind::Load), op=OperatorKind::Lt, right=Name(id=max_heap_size, ctx=ExprContextKind::Load)), step=Assign(target=Name(id=i, ctx=ExprContextKind::Store), value=BinOp(left=Name(id=i, ctx=ExprContextKind::Load), op=OperatorKind::Add, right=Num(n=1))), body=[Assign(target=Subscript(name=heap, index=Name(id=i, ctx=ExprContextKind::Load), ctx=ExprContextKind::Store), value=Num(n=0))])]), FuncDef(return_type=BasicTypeKind::Void, name=main, args=[], decls=[VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=n), VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=temp), VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=i), VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=j), VarDecl(type=BasicTypeKind::Int, is_array=0, size=0, name=array_size)], stmts=[ExprStmt(value=Name(id=reset_heap, ctx=ExprContextKind::Load)), Read(names=[n]), For(initial=Assign(target=Name(id=i, ctx=ExprContextKind::Store), value=Num(n=0)), condition=BinOp(left=Name(id=i, ctx=ExprContextKind::Load), op=OperatorKind::Lt, right=Name(id=n, ctx=ExprContextKind::Load)), step=Assign(target=Name(id=i, ctx=ExprContextKind::Store), value=BinOp(left=Name(id=i, ctx=ExprContextKind::Load), op=OperatorKind::Add, right=Num(n=1))), body=[Read(names=[array_size]), If(test=BinOp(left=Name(id=array_size, ctx=ExprContextKind::Load), op=OperatorKind::Gt, right=Name(id=max_heap_size, ctx=ExprContextKind::Load)), body=[Write(str="array_size exceeds max_heap_size", value=None)], orelse=[For(initial=Assign(target=Name(id=j, ctx=ExprContextKind::Store), value=Num(n=0)), condition=BinOp(left=Name(id=j, ctx=ExprContextKind::Load), op=OperatorKind::Lt, right=Name(id=array_size, ctx=ExprContextKind::Load)), step=Assign(target=Name(id=j, ctx=ExprContextKind::Store), value=BinOp(left=Name(id=j, ctx=ExprContextKind::Load), op=OperatorKind::Add, right=Num(n=1))), body=[Read(names=[temp]), Assign(target=Subscript(name=heap, index=Name(id=j, ctx=ExprContextKind::Load), ctx=ExprContextKind::Store), value=Name(id=temp, ctx=ExprContextKind::Load))]), ExprStmt(value=Call(func=heap_sort, args=[Name(id=array_size, ctx=ExprContextKind::Load)])), ExprStmt(value=Call(func=print_heap, args=[Name(id=array_size, ctx=ExprContextKind::Load)]))])])])])

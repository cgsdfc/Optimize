Program(decls=[ConstDecl(type=basic_type.Int,
name=max_heap_size, value=Num(n=100, loc=(1, 26)), loc=(1, 0)),
ConstDecl(type=basic_type.Character, name=character, value=Char(c=None,
loc=(2, 11)), loc=(2, 0)), ConstDecl(type=basic_type.Int, name=is_valid,
value=Num(n=1, loc=(4, 21)), loc=(4, 0)), ConstDecl(type=basic_type.Int,
name=hasattr, value=Num(n=0, loc=(4, 34)), loc=(4, 0)),
ConstDecl(type=basic_type.Character, name=digit, value=Char(c=None,
loc=(5, 11)), loc=(5, 0)), ConstDecl(type=basic_type.Character,
name=letter, value=Char(c=None, loc=(5, 24)), loc=(5, 0)),
VarDecl(type=basic_type.Int, is_array=True, size=100, name=heap, loc=(7,
8)), VarDecl(type=basic_type.Int, is_array=False, size=0, name=index,
loc=(8, 0)), VarDecl(type=basic_type.Int, is_array=False, size=0,
name=flag, loc=(10, 8)), VarDecl(type=basic_type.Int, is_array=True,
size=2, name=array, loc=(10, 10)), VarDecl(type=basic_type.Int,
is_array=False, size=0, name=module, loc=(11, 10)),
VarDecl(type=basic_type.Int, is_array=False, size=0, name=class, loc=(11,
12)), VarDecl(type=basic_type.Int, is_array=True, size=10, name=errors,
loc=(12, 10)), VarDecl(type=basic_type.Int, is_array=True, size=20,
name=input, loc=(12, 16)), FuncDef(return_type=basic_type.Int,
name=addi, args=[arg(type=<basic_type.Int: 1>, name='a',
loc=(14, 9)), arg(type=<basic_type.Int: 1>, name='b', loc=(14,
16))], decls=[], stmts=[Return(value=BinOp(left=Name(id=a,
ctx=expr_context.Load, loc=(15, 10)), op=operator.Add, right=Name(id=b,
ctx=expr_context.Load, loc=(15, 14)), loc=(15, 12)), loc=(15,
2))], loc=(14, 0)), FuncDef(return_type=basic_type.Character,
name=addc, args=[arg(type=<basic_type.Character: 2>, name='a',
loc=(18, 10)), arg(type=<basic_type.Character: 2>, name='b',
loc=(18, 18))], decls=[], stmts=[Return(value=BinOp(left=Name(id=a,
ctx=expr_context.Load, loc=(19, 10)), op=operator.Add, right=Name(id=b,
ctx=expr_context.Load, loc=(19, 14)), loc=(19, 12)), loc=(19, 2))],
loc=(18, 0)), FuncDef(return_type=basic_type.Void, name=print_char,
args=[arg(type=<basic_type.Character: 2>, name='c', loc=(22,
16))], decls=[], stmts=[Write(str=None, value=Name(id=c,
ctx=expr_context.Load, loc=(23, 9)), loc=(23, 2))], loc=(22, 0)),
FuncDef(return_type=basic_type.Void, name=print_string, args=[], decls=[],
stmts=[Write(str=Str(s="this is a string", loc=(27, 9)), value=None,
loc=(27, 2))], loc=(26, 0)), FuncDef(return_type=basic_type.Void,
name=print_string_ex, args=[arg(type=<basic_type.Int: 1>, name='expr',
loc=(30, 21))], decls=[], stmts=[Write(str=Str(s="expr is ", loc=(31,
9)), value=Name(id=expr, ctx=expr_context.Load, loc=(31, 21)),
loc=(31, 2))], loc=(30, 0)), FuncDef(return_type=basic_type.Void,
name=dead_loop, args=[], decls=[], stmts=[While(condition=Num(n=1,
loc=(35, 9)), body=[Write(str=Str(s="In dead loop", loc=(36,
11)), value=None, loc=(36, 4))], loc=(35, 2))], loc=(34, 0)),
FuncDef(return_type=basic_type.Int, name=prompt_int, args=[],
decls=[VarDecl(type=basic_type.Int, is_array=False, size=0, name=val,
loc=(41, 6))], stmts=[Write(str=Str(s="Please input an integer:",
loc=(42, 9)), value=None, loc=(42, 2)), Read(names=[Name(id=val,
ctx=expr_context.Store, loc=(43, 2))], loc=(43, 2)),
Return(value=Name(id=val, ctx=expr_context.Load, loc=(44, 10)),
loc=(44, 2))], loc=(40, 0)), FuncDef(return_type=basic_type.Void,
name=swap, args=[arg(type=<basic_type.Int: 1>, name='index1', loc=(48,
10)), arg(type=<basic_type.Int: 1>, name='index2', loc=(48, 22))],
decls=[VarDecl(type=basic_type.Int, is_array=False, size=0, name=temp,
loc=(49, 6))], stmts=[Assign(target=Name(id=temp, ctx=expr_context.Store,
loc=(50, 2)), value=Subscript(name=heap, index=Name(id=index1,
ctx=expr_context.Load, loc=(50, 14)), ctx=expr_context.Load,
loc=(50, 13)), loc=(50, 2)), Assign(target=Subscript(name=heap,
index=Name(id=index1, ctx=expr_context.Load, loc=(51, 7)),
ctx=expr_context.Store, loc=(51, 6)), value=Subscript(name=heap,
index=Name(id=index2, ctx=expr_context.Load, loc=(51,
22)), ctx=expr_context.Load, loc=(51, 21)), loc=(51, 2)),
Assign(target=Subscript(name=heap, index=Name(id=index2,
ctx=expr_context.Load, loc=(52, 7)), ctx=expr_context.Store, loc=(52,
6)), value=Name(id=temp, ctx=expr_context.Load, loc=(52, 17)),
loc=(52, 2))], loc=(48, 0)), FuncDef(return_type=basic_type.Void,
name=heapify, args=[arg(type=<basic_type.Int: 1>, name='index', loc=(55,
13)), arg(type=<basic_type.Int: 1>, name='heap_size', loc=(55, 24))],
decls=[VarDecl(type=basic_type.Int, is_array=False, size=0, name=largest,
loc=(56, 6)), VarDecl(type=basic_type.Int, is_array=False, size=0,
name=left, loc=(57, 6)), VarDecl(type=basic_type.Int, is_array=False,
size=0, name=right, loc=(58, 6))], stmts=[Assign(target=Name(id=largest,
ctx=expr_context.Store, loc=(60, 2)), value=Name(id=index,
ctx=expr_context.Load, loc=(60, 12)), loc=(60, 2)),
Assign(target=Name(id=left, ctx=expr_context.Store, loc=(61, 2)),
value=BinOp(left=BinOp(left=Num(n=2, loc=(61, 9)), op=operator.Mult,
right=Name(id=index, ctx=expr_context.Load, loc=(61, 13)), loc=(61, 11)),
op=operator.Add, right=Num(n=1, loc=(61, 21)), loc=(61, 19)), loc=(61,
2)), Assign(target=Name(id=right, ctx=expr_context.Store, loc=(62, 2)),
value=BinOp(left=BinOp(left=Num(n=2, loc=(62, 10)), op=operator.Mult,
right=Name(id=index, ctx=expr_context.Load, loc=(62, 14)), loc=(62, 12)),
op=operator.Add, right=Num(n=2, loc=(62, 22)), loc=(62, 20)), loc=(62,
2)), If(test=BinOp(left=Name(id=left, ctx=expr_context.Load, loc=(64, 6)),
op=operator.Lt, right=Name(id=heap_size, ctx=expr_context.Load, loc=(64,
13)), loc=(64, 11)), body=[If(test=BinOp(left=Subscript(name=heap,
index=Name(id=left, ctx=expr_context.Load, loc=(65,
13)), ctx=expr_context.Load, loc=(65, 12)), op=operator.Gt,
right=Subscript(name=heap, index=Name(id=largest, ctx=expr_context.Load,
loc=(65, 26)), ctx=expr_context.Load, loc=(65, 25)), loc=(65, 19)),
body=[Assign(target=Name(id=largest, ctx=expr_context.Store, loc=(66,
6)), value=Name(id=left, ctx=expr_context.Load, loc=(66, 16)),
loc=(66, 6))], orelse=[], loc=(65, 4))], orelse=[], loc=(64, 2)),
If(test=BinOp(left=Name(id=right, ctx=expr_context.Load, loc=(70, 6)),
op=operator.Lt, right=Name(id=heap_size, ctx=expr_context.Load, loc=(70,
14)), loc=(70, 12)), body=[If(test=BinOp(left=Subscript(name=heap,
index=Name(id=right, ctx=expr_context.Load, loc=(71,
13)), ctx=expr_context.Load, loc=(71, 12)), op=operator.Gt,
right=Subscript(name=heap, index=Name(id=largest, ctx=expr_context.Load,
loc=(71, 27)), ctx=expr_context.Load, loc=(71, 26)), loc=(71, 20)),
body=[Assign(target=Name(id=largest, ctx=expr_context.Store, loc=(72,
6)), value=Name(id=right, ctx=expr_context.Load, loc=(72, 16)),
loc=(72, 6))], orelse=[], loc=(71, 4))], orelse=[], loc=(70, 2)),
If(test=BinOp(left=Name(id=largest, ctx=expr_context.Load, loc=(76,
6)), op=operator.NotEq, right=Name(id=index, ctx=expr_context.Load,
loc=(76, 17)), loc=(76, 14)), body=[ExprStmt(value=Call(func=swap,
args=[Name(id=index, ctx=expr_context.Load, loc=(77, 9)),
Name(id=largest, ctx=expr_context.Load, loc=(77, 16))],
loc=(77, 4)), loc=(77, 4)), ExprStmt(value=Call(func=heapify,
args=[Name(id=largest, ctx=expr_context.Load, loc=(78,
12)), Name(id=heap_size, ctx=expr_context.Load, loc=(78,
21))], loc=(78, 4)), loc=(78, 4))], orelse=[], loc=(76, 2))],
loc=(55, 0)), FuncDef(return_type=basic_type.Void, name=heap_sort,
args=[arg(type=<basic_type.Int: 1>, name='heap_size', loc=(83, 15))],
decls=[VarDecl(type=basic_type.Int, is_array=False, size=0, name=i,
loc=(84, 6))], stmts=[Assign(target=Name(id=i, ctx=expr_context.Store,
loc=(86, 2)), value=BinOp(left=BinOp(left=Name(id=heap_size,
ctx=expr_context.Load, loc=(86, 6)), op=operator.Div, right=Num(n=2,
loc=(86, 18)), loc=(86, 16)), op=operator.Sub, right=Num(n=1, loc=(86,
22)), loc=(86, 20)), loc=(86, 2)), While(condition=BinOp(left=Name(id=i,
ctx=expr_context.Load, loc=(87, 9)), op=operator.GtE, right=Num(n=0,
loc=(87, 14)), loc=(87, 11)), body=[ExprStmt(value=Call(func=heapify,
args=[Name(id=i, ctx=expr_context.Load, loc=(88, 12)), Name(id=heap_size,
ctx=expr_context.Load, loc=(88, 15))], loc=(88, 4)), loc=(88,
4)), Assign(target=Name(id=i, ctx=expr_context.Store, loc=(89,
4)), value=BinOp(left=Name(id=i, ctx=expr_context.Load, loc=(89,
8)), op=operator.Sub, right=Num(n=1, loc=(89, 12)), loc=(89, 10)),
loc=(89, 4))], loc=(87, 2)), For(initial=Assign(target=Name(id=i,
ctx=expr_context.Store, loc=(92, 7)), value=BinOp(left=Name(id=heap_size,
ctx=expr_context.Load, loc=(92, 11)), op=operator.Sub,
right=Num(n=1, loc=(92, 23)), loc=(92, 21)), loc=(92, 7)),
condition=BinOp(left=Name(id=i, ctx=expr_context.Load, loc=(92,
26)), op=operator.GtE, right=Num(n=0, loc=(92, 31)), loc=(92, 28)),
step=Assign(target=Name(id=i, ctx=expr_context.Store, loc=(92, 34)),
value=BinOp(left=Name(id=i, ctx=expr_context.Load, loc=(92, 38)),
op=operator.Sub, right=Num(n=1, loc=(92, 42)), loc=(92, 38)), loc=(92,
34)), body=[ExprStmt(value=Call(func=swap, args=[Num(n=0, loc=(93, 9)),
Name(id=i, ctx=expr_context.Load, loc=(93, 12))], loc=(93, 4)), loc=(93,
4)), ExprStmt(value=Call(func=heapify, args=[Num(n=0, loc=(94, 12)),
Name(id=i, ctx=expr_context.Load, loc=(94, 15))], loc=(94, 4)), loc=(94,
4))], loc=(92, 2))], loc=(83, 0)), FuncDef(return_type=basic_type.Void,
name=print_heap, args=[arg(type=<basic_type.Int: 1>, name='heap_size',
loc=(98, 16))], decls=[VarDecl(type=basic_type.Int, is_array=False,
size=0, name=i, loc=(99, 6))], stmts=[For(initial=Assign(target=Name(id=i,
ctx=expr_context.Store, loc=(101, 7)), value=Num(n=0, loc=(101, 11)),
loc=(101, 7)), condition=BinOp(left=Name(id=i, ctx=expr_context.Load,
loc=(101, 14)), op=operator.Lt, right=Name(id=heap_size,
ctx=expr_context.Load, loc=(101, 18)), loc=(101, 16)),
step=Assign(target=Name(id=i, ctx=expr_context.Store, loc=(101, 29)),
value=BinOp(left=Name(id=i, ctx=expr_context.Load, loc=(101, 33)),
op=operator.Add, right=Num(n=1, loc=(101, 37)), loc=(101, 33)), loc=(101,
29)), body=[Write(str=None, value=Subscript(name=heap, index=Name(id=i,
ctx=expr_context.Load, loc=(102, 16)), ctx=expr_context.Load,
loc=(102, 15)), loc=(102, 4)), If(test=BinOp(left=Name(id=i,
ctx=expr_context.Load, loc=(103, 8)), op=operator.NotEq,
right=BinOp(left=Name(id=heap_size, ctx=expr_context.Load, loc=(103,
13)), op=operator.Sub, right=Num(n=1, loc=(103, 25)), loc=(103,
23)), loc=(103, 10)), body=[Write(str=Str(s=" ", loc=(104, 13)),
value=None, loc=(104, 6))], orelse=[], loc=(103, 4))], loc=(101, 2))],
loc=(98, 0)), FuncDef(return_type=basic_type.Void, name=reset_heap,
args=[], decls=[VarDecl(type=basic_type.Int, is_array=False, size=0,
name=i, loc=(110, 6))], stmts=[For(initial=Assign(target=Name(id=i,
ctx=expr_context.Store, loc=(112, 7)), value=Num(n=0, loc=(112, 11)),
loc=(112, 7)), condition=BinOp(left=Name(id=i, ctx=expr_context.Load,
loc=(112, 14)), op=operator.Lt, right=Name(id=max_heap_size,
ctx=expr_context.Load, loc=(112, 18)), loc=(112, 16)),
step=Assign(target=Name(id=i, ctx=expr_context.Store, loc=(112,
33)), value=BinOp(left=Name(id=i, ctx=expr_context.Load, loc=(112,
37)), op=operator.Add, right=Num(n=1, loc=(112, 41)), loc=(112, 37)),
loc=(112, 33)), body=[Assign(target=Subscript(name=heap, index=Name(id=i,
ctx=expr_context.Load, loc=(113, 9)), ctx=expr_context.Store, loc=(113,
8)), value=Num(n=0, loc=(113, 14)), loc=(113, 4))], loc=(112, 2))],
loc=(109, 0)), FuncDef(return_type=basic_type.Void, name=main,
args=[], decls=[VarDecl(type=basic_type.Int, is_array=False,
size=0, name=n, loc=(118, 6)), VarDecl(type=basic_type.Int,
is_array=False, size=0, name=temp, loc=(119, 6)),
VarDecl(type=basic_type.Int, is_array=False, size=0, name=i, loc=(120,
6)), VarDecl(type=basic_type.Int, is_array=False, size=0, name=j,
loc=(120, 9)), VarDecl(type=basic_type.Int, is_array=False, size=0,
name=array_size, loc=(121, 6))], stmts=[ExprStmt(value=Name(id=reset_heap,
ctx=expr_context.Load, loc=(123, 2)), loc=(123, 2)),
Read(names=[Name(id=n, ctx=expr_context.Store, loc=(124, 2))], loc=(124,
2)), For(initial=Assign(target=Name(id=i, ctx=expr_context.Store,
loc=(126, 7)), value=Num(n=0, loc=(126, 11)), loc=(126, 7)),
condition=BinOp(left=Name(id=i, ctx=expr_context.Load, loc=(126, 14)),
op=operator.Lt, right=Name(id=n, ctx=expr_context.Load, loc=(126, 18)),
loc=(126, 16)), step=Assign(target=Name(id=i, ctx=expr_context.Store,
loc=(126, 21)), value=BinOp(left=Name(id=i, ctx=expr_context.Load,
loc=(126, 25)), op=operator.Add, right=Num(n=1, loc=(126, 29)),
loc=(126, 25)), loc=(126, 21)), body=[Read(names=[Name(id=array_size,
ctx=expr_context.Store, loc=(127, 4))], loc=(127, 4)),
If(test=BinOp(left=Name(id=array_size, ctx=expr_context.Load, loc=(128,
8)), op=operator.Gt, right=Name(id=max_heap_size, ctx=expr_context.Load,
loc=(128, 21)), loc=(128, 19)), body=[Write(str=Str(s="array_size
exceeds max_heap_size", loc=(129, 13)), value=None, loc=(129, 6))],
orelse=[For(initial=Assign(target=Name(id=j, ctx=expr_context.Store,
loc=(131, 11)), value=Num(n=0, loc=(131, 15)), loc=(131, 11)),
condition=BinOp(left=Name(id=j, ctx=expr_context.Load, loc=(131, 18)),
op=operator.Lt, right=Name(id=array_size, ctx=expr_context.Load,
loc=(131, 22)), loc=(131, 20)), step=Assign(target=Name(id=j,
ctx=expr_context.Store, loc=(131, 34)), value=BinOp(left=Name(id=j,
ctx=expr_context.Load, loc=(131, 38)), op=operator.Add,
right=Num(n=1, loc=(131, 42)), loc=(131, 38)), loc=(131, 34)),
body=[Read(names=[Name(id=temp, ctx=expr_context.Store, loc=(132, 8))],
loc=(132, 8)), Assign(target=Subscript(name=heap, index=Name(id=j,
ctx=expr_context.Load, loc=(133, 13)), ctx=expr_context.Store, loc=(133,
12)), value=Name(id=temp, ctx=expr_context.Load, loc=(133, 18)),
loc=(133, 8))], loc=(131, 6)), ExprStmt(value=Call(func=heap_sort,
args=[Name(id=array_size, ctx=expr_context.Load, loc=(135, 16))],
loc=(135, 6)), loc=(135, 6)), ExprStmt(value=Call(func=print_heap,
args=[Name(id=array_size, ctx=expr_context.Load, loc=(136, 17))],
loc=(136, 6)), loc=(136, 6))], loc=(128, 4))], loc=(126, 2))], loc=(117,
0))])

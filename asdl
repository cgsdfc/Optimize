-- ASDL's 7 builtin types are:
-- identifier, int, string, bytes, object, singleton, constant
--

module Compiler
{
    program = Program(decl* decls)

    decl = ConstDecl(basic_type type, identifier name, expr value)
         | VarDecl(var_type type, identifier name)
         | FuncDef(basic_type return_type, identifier name, arg* args,
                       decl* decls, stmt* stmts)
          attributes (location loc)

    arg = (basic_type type, identifier name)
          attributes (location loc)

    stmt = Read(identifier *names)
         | Write(string? str, expr? value)
         | Assign(expr target, expr value)
         | For(stmt initial, expr condition, stmt step, stmt* body)
         | While(expr condition, stmt* body)
         | Switch(expr value, label_stmt* labels, stmt default_)
         | Return(expr? value)
         | If(expr test, stmt* body, stmt* orelse)
         | Expr(expr value)
          attributes (location loc)

    label_stmt = (expr value, stmt stmt)
                 attributes (location loc)

    expr = BinOp(expr left, operator op, expr right)
         | UnaryOp(unaryop op, expr operand)
         | Call(identifier func, expr* args)
         | Num(object n)
         | Str(string s)
         | Char(int c)

         -- the following expression can appear in assignment context
         | Subscript(identifier name, expr index, expr_context ctx)
         | Name(identifier id, expr_context ctx)
          attributes (location loc)

    operator = Add | Sub | Mult | Div | Eq | NotEq | Lt | LtE | Gt | GtE

    unaryop = UAdd | USub

    expr_context = Load | Store

    basic_type = Int | Character | Void

    var_type = VarType(basic_type type, int is_array, int size)
}
